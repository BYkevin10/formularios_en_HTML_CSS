/**
 * Maneja el env√≠o del formulario
 * - Previene el env√≠o normal
 * - Captura los datos
 * - Muestra los resultados
 */
document.getElementById('miFormulario').addEventListener('submit', function(evento) {
  // 1. Validar t√©rminos y condiciones primero
  const checkTerminos = document.getElementById('acepto');
  const terminosError = document.getElementById('terminos-error');
  
  if (!checkTerminos.checked) {
    // Detener el env√≠o del formulario
    evento.preventDefault();
    
    // Mostrar mensaje de error
    terminosError.style.display = 'block';
    
    // Animaci√≥n y scroll a los t√©rminos
    const terminosContainer = document.querySelector('.terminos');
    terminosContainer.classList.add('terminos-invalido');
    setTimeout(() => {
      terminosContainer.classList.remove('terminos-invalido');
    }, 500);
    
    terminosContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
    checkTerminos.focus();
    
    // Salir de la funci√≥n sin procesar el formulario
    return;
  }
  
  // 2. Si los t√©rminos est√°n aceptados, continuar con el procesamiento normal
  // Prevenir el env√≠o normal del formulario
  evento.preventDefault();
  
  // Capturar todos los datos del formulario
  const formulario = evento.target;
  const datosFormulario = new FormData(formulario);
  
  // Mostrar datos en consola para depuraci√≥n
  console.log('Datos del formulario:');
  for (let [campo, valor] of datosFormulario.entries()) {
    console.log(`${campo}: ${valor}`);
  }
  
  // Convertir los datos a un formato legible en HTML
  mostrarResultados(datosFormulario);
});

/**
 * Muestra los resultados del formulario en la p√°gina
 * @param {FormData} datos - Los datos del formulario
 */
function mostrarResultados(datos) {
  let datosHTML = '';
  
  // Recorrer cada campo y crear HTML para mostrar
  for (let [campo, valor] of datos.entries()) {
    // Saltar campos vac√≠os
    if (!valor || valor.toString().trim() === '') continue;
    
    // Formatear nombres de campos para mostrarlos mejor
    const nombreCampo = formatearNombreCampo(campo);
    
    // Formatear valores especiales
    const valorFormateado = formatearValor(campo, valor);
    
    // Agregar al HTML
    datosHTML += `
      <div class="dato">
        <span class="etiqueta">${nombreCampo}:</span> ${valorFormateado}
      </div>
    `;
  }
  
  // Mostrar los resultados
  document.getElementById('datosEnviados').innerHTML = datosHTML;
  document.getElementById('resultado').style.display = 'block';
  
  // Scroll suave hacia los resultados
  document.getElementById('resultado').scrollIntoView({ behavior: 'smooth' });
  
  // Mostrar alerta de confirmaci√≥n
  alert('¬°Formulario enviado correctamente! üéâ\nRevisa los datos m√°s abajo.');
}

/**
 * Formatea los nombres de los campos para mostrarlos mejor
 * @param {string} campo - Nombre original del campo
 * @returns {string} Nombre formateado
 */
function formatearNombreCampo(campo) {
  const nombres = {
    'nombre': 'Nombre completo',
    'email': 'Correo electr√≥nico',
    'telefono': 'Tel√©fono',
    'password': 'Contrase√±a',
    'fecha_nacimiento': 'Fecha de nacimiento',
    'hora_entrada': 'Hora de entrada',
    'fecha_hora_local': 'Fecha y hora de reuni√≥n',
    'mes_preferido': 'Mes favorito',
    'semana_reserva': 'Semana de reserva',
    'notificaciones': 'Recibir notificaciones',
    'genero': 'G√©nero',
    'pais': 'Pa√≠s',
    'color_favorito': 'Color favorito',
    'satisfaccion': 'Nivel de satisfacci√≥n',
    'foto_perfil': 'Foto de perfil',
    'busqueda': 'B√∫squeda',
    'sitio_web': 'Sitio web',
    'id_sesion': 'ID de sesi√≥n',
    'acepto': 'T√©rminos aceptados' // A√±adido para los t√©rminos
  };
  
  return nombres[campo] || campo.replace(/_/g, ' ');
}

/**
 * Formatea valores especiales para mostrarlos mejor
 * @param {string} campo - Nombre del campo
 * @param {string} valor - Valor original
 * @returns {string} Valor formateado
 */
function formatearValor(campo, valor) {
  // Para checkbox
  if (campo === 'notificaciones' || campo === 'acepto') {
    return valor === 'on' ? 'S√≠' : 'No';
  }
  
  // Para fechas
  if (['fecha_nacimiento', 'mes_preferido', 'semana_reserva'].includes(campo)) {
    return new Date(valor).toLocaleDateString();
  }
  
  // Para fecha y hora
  if (campo === 'fecha_hora_local') {
    return new Date(valor).toLocaleString();
  }
  
  return valor;
}

/**
 * Inicializaci√≥n cuando el DOM est√° listo
 */
document.addEventListener('DOMContentLoaded', function() {
  // Configurar el evento para el input range
  const rangoSatisfaccion = document.getElementById('satisfaccion');
  const valorRango = document.getElementById('valor_rango');
  
  if (rangoSatisfaccion && valorRango) {
    // Actualizar el valor inicial
    valorRango.textContent = rangoSatisfaccion.value;
    
    // Configurar el evento de cambio
    rangoSatisfaccion.addEventListener('input', function() {
      valorRango.textContent = this.value;
      
      // Cambiar color seg√∫n el valor (opcional)
      const valor = parseInt(this.value);
      if (valor <= 3) {
        valorRango.style.color = '#e74c3c'; // Rojo
      } else if (valor <= 6) {
        valorRango.style.color = '#f39c12'; // Naranja
      } else {
        valorRango.style.color = '#2ecc71'; // Verde
      }
    });
  }
  
  // Configurar eventos para t√©rminos y condiciones
  const checkTerminos = document.getElementById('acepto');
  const terminosError = document.getElementById('terminos-error');
  
  if (checkTerminos && terminosError) {
    // Ocultar mensaje de error cuando se marque
    checkTerminos.addEventListener('change', function() {
      if (this.checked) {
        terminosError.style.display = 'none';
      }
    });
    
    // Opcional: Mostrar t√©rminos en modal
    const verTerminos = document.getElementById('ver-terminos');
    if (verTerminos) {
      verTerminos.addEventListener('click', function(e) {
        e.preventDefault();
        alert("Aqu√≠ aparecer√≠an los t√©rminos y condiciones completos.");
      });
    }
  }
  
  console.log('Formulario cargado y listo');
});